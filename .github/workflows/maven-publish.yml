# This workflow builds the project, creates a version number, and publishes a GitHub Release with the compiled JAR.
name: Java CI with Maven Release

on:
  push:
    branches:
      - main # Triggers the workflow on a push to the master branch
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    # Grant permissions for the workflow to create a release and write content.
    permissions:
      contents: write

    steps:
    # 1. Check out the repository code
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Fetches all history for all branches and tags, required for commit counting
        fetch-depth: 0

    # 2. Set up JDK 17
    # The bot is designed for Java 17, so we set the build environment to match.
    - name: Set up JDK 23
      uses: actions/setup-java@v4
      with:
        java-version: '23'
        distribution: 'temurin'

    # 3. Calculate the version number
    # Creates a version like "1.0.15" where 15 is the total number of commits.
    - name: Generate version number
      run: echo "RELEASE_VERSION=1.0.$(git rev-list --count HEAD)" >> $GITHUB_ENV

    # 4. Build the project with Maven
    # This compiles the code and packages it into a JAR file.
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    # 5. Create a GitHub Release
    # This uses the version number generated in step 3 to create a new tag and release.
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_VERSION }}
        release_name: Release ${{ env.RELEASE_VERSION }}
        body: |
          Automated release based on the latest commit.
        draft: false
        prerelease: false

    # 6. Find the compiled JAR file
    # This step locates the JAR file created by Maven, excluding source/javadoc jars.
    - name: Get JAR filename
      id: get_jar
      run: |
        JAR_FILE=$(find target -maxdepth 1 -name "*.jar" ! -name "*-sources.jar" ! -name "*-javadoc.jar" | head -n 1)
        echo "path=$JAR_FILE" >> $GITHUB_OUTPUT
        echo "name=$(basename $JAR_FILE)" >> $GITHUB_OUTPUT

    # 7. Upload the JAR as a release asset
    # This attaches the bot's runnable JAR file to the GitHub release created above.
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.get_jar.outputs.path }}
        asset_name: ${{ steps.get_jar.outputs.name }}
        asset_content_type: application/java-archive
