# This workflow builds the project, creates a versioned tag,
# and publishes a GitHub Release with an auto-generated changelog.
name: Build and Release with Changelog

on:
  push:
    branches:
      - master  # Triggers the workflow on a push to the master branch
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      # Required to create releases and tags, and to generate release notes.
      contents: write

    steps:
    # 1. Check out the repository code
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Fetches all history for all branches/tags.
        # This is REQUIRED for generating release notes.
        fetch-depth: 0

    # 2. Set up JDK 23
    - name: Set up JDK 23
      uses: actions/setup-java@v4
      with:
        java-version: '23'
        distribution: 'temurin'

    # 3. Generate a version tag (e.g., v1.0.172)
    - name: Generate version tag
      id: version
      run: echo "tag=v1.0.$(git rev-list --count HEAD)" >> $GITHUB_OUTPUT

    # 4. Build the project with Maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    # 5. Create a GitHub Release with an auto-generated changelog
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        release_name: Release ${{ steps.version.outputs.tag }}
        # This is the magic part! It creates a release body with a list of
        # commits and a "Full Changelog" link, just like you want.
        generate_release_notes: true

    # 6. Find the compiled JAR file name and path
    - name: Get JAR filename
      id: get_jar
      run: |
        JAR_FILE=$(find target -maxdepth 1 -name "*.jar" ! -name "*-sources.jar" ! -name "*-javadoc.jar" | head -n 1)
        echo "path=$JAR_FILE" >> $GITHUB_OUTPUT
        echo "name=$(basename $JAR_FILE)" >> $GITHUB_OUTPUT

    # 7. Upload the JAR file as a release asset
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.get_jar.outputs.path }}
        asset_name: ${{ steps.get_jar.outputs.name }}
        asset_content_type: application/java-archive
